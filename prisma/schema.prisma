// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum RefundType {
  POINT
  BANK
}

model User {
  id          Int           @id @default(autoincrement())
    role       Role    @default(USER)
  first_name String
  last_name  String
  phone      String
  address    String?
  username    String        @db.VarChar(30) @unique
  password    String        @db.VarChar(72)
  email       String?
  Carts      Cart[]
  orders     Order[]
  @@map("Users")
}

model Book {
  id            Int     @id @default(autoincrement())
  author_name   String
  title         String
  genre         String
  publishedYear Int
  groups        Group[]
  orders        Order[]
  carts         Cart?
}

model Group {
  id         Int    @id @default(autoincrement())
  group_name String
  book       Book   @relation(fields: [bookId], references: [id])
  bookId     Int    @unique @map("book_id")
}

model Cart {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  add_items    Int
  delete_items Int
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @map("user_id")
  book         Book     @relation(fields: [bookId], references: [id])
  bookId       Int      @unique @map("book_id")
  Order Order?
}

enum Status {
  SHIPPED
  IN_TRANSIT
  DELIVERED
}

model Order {
  id           Int      @id @default(autoincrement())
  order_date   DateTime @default(now())
  total_amount Float
  status       Status   @default(SHIPPED)
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @map("user_id")
  book         Book     @relation(fields: [bookId], references: [id])
  bookId       Int      @unique @map("book_id")
  cart         Cart     @relation(fields: [cartId], references: [id])
  cartId       Int      @unique @map("cart_id")
  payment      Payment?
}

model Payment {
  id             Int      @id @default(autoincrement())
  total          Float
  payment_date   DateTime @default(now())
  payment_method String
  credit_card    String
  expiry_date    String
  payment_status String
  order          Order    @relation(fields: [orderId], references: [id])
  orderId        Int      @unique @map("order_id")
}
